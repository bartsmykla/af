name: "Release"

on:
  push:
    tags: ["v*.*.*"]

permissions:
  contents: read

env:
  PROJECT_NAME: af
  CARGO_TERM_COLOR: always

jobs:
  define-matrix:
    runs-on: ubuntu-24.04

    outputs:
      matrix: ${{ steps.define-matrix.outputs.matrix }}

    steps:
    - name: "Define Matrix"
      id: define-matrix
      run: |
        echo "matrix=$(cat <<'EOF' | jq --compact-output .
          {
            "include": [
              {
                "name": "macos-arm64",
                "runner": "macos-15",
                "target": "aarch64-apple-darwin",
                "env": {
                  "OPENSSL_DIR": "/opt/homebrew/opt/openssl"
                }
              },
              {
                "name": "macos-amd64",
                "runner": "macOS-13",
                "target": "x86_64-apple-darwin",
                "env": {
                  "OPENSSL_DIR": "/usr/local/opt/openssl"
                }
              }
            ]
          }
        EOF
        )" >> "$GITHUB_OUTPUT"

  build:
    runs-on: ${{ matrix.runner }}

    needs: define-matrix

    env:
      OPENSSL_DIR: ${{ matrix.env.OPENSSL_DIR }}

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.define-matrix.outputs.matrix) }}

    steps:
    - name: "Checkout"
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: "Install Rust"
      uses: dtolnay/rust-toolchain@888c2e1ea69ab0d4330cbf0af1ecc7b68f368cc1 # v1
      with:
        targets: ${{ matrix.target }}
        toolchain: nightly

    - name: "Setup Cache"
      uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2.7.8

    - name: "Build macOS Binary"
      if: contains(matrix.target, 'darwin')
      run: |
        cargo +nightly build -Z unstable-options \
          --artifact-dir dist \
          --target ${{ matrix.target }} \
          --verbose \
          --locked \
          --release

    - name: "Add Arch Suffix to Binary"
      if: contains(matrix.target, 'darwin')
      id: add-suffix
      env:
        MATRIX_NAME: ${{ matrix.name }}
        BASE_PATH: dist/${{ env.PROJECT_NAME }}
      run: |
        final_path="$BASE_PATH-$MATRIX_NAME"
        echo "binary_path=$final_path" >> "$GITHUB_OUTPUT"
        
        mv "$BASE_PATH" "$final_path"

    - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      if: success()
      with:
        name: ${{ env.PROJECT_NAME }}-${{ matrix.name }}
        path: ${{ steps.add-suffix.outputs.binary_path }}
        if-no-files-found: error

    ###########################################################################
    #                                  DEBUG                                  #
    ###########################################################################

    - name: "Initialize Debug Shell"
      if: vars.FORCE_DEBUG_SHELL == 'true' || failure() && runner.debug == '1'
      env:
        TUNSHELL_SECRET: ${{ secrets.TUNSHELL_SECRET }}
      run: .github/scripts/debug-shell.bash

  upload-artifacts:
    runs-on: ubuntu-24.04

    needs: [define-matrix, build]

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.define-matrix.outputs.matrix) }}

    steps:
    - name: "Generate GitHub App Token"
      id: github-app-token
      uses: actions/create-github-app-token@af35edadc00be37caa72ed9f3e6d5f7801bfdf09 # v1.11.7
      with:
        app-id: ${{ secrets.APP_ID }}
        private-key: ${{ secrets.APP_PRIVATE_KEY }}

    - name: "Get ${{ matrix.name }} binary"
      id: binary
      uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
      with:
        name: ${{ env.PROJECT_NAME }}-${{ matrix.name }}
        path: dist

    - name: "Add ${{ matrix.name }} artifacts to the release"
      uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda # v2.2.1
      with:
        token: ${{ steps.github-app-token.outputs.token }}
        files: ${{ steps.binary.outputs.download-path }}/*
        make_latest: true
        generate_release_notes: true
