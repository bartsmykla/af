name: "Bump Version"

on:
  workflow_dispatch: {}

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always

jobs:
  bump-version:
    runs-on: ubuntu-24.04

    steps:
    - name: "Checkout"
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0
        persist-credentials: false

    - name: "Generate GitHub App Token"
      id: github-app-token
      uses: actions/create-github-app-token@3ff1caaa28b64c9cc276ce0a02e2ff584f3900c5 # v2.0.2
      with:
        app-id: ${{ secrets.APP_ID }}
        private-key: ${{ secrets.APP_PRIVATE_KEY }}

    - name: "Get GitHub App User ID"
      id: get-user-id
      env:
        APP_SLUG: ${{ steps.github-app-token.outputs.app-slug }}
        GH_TOKEN: ${{ steps.github-app-token.outputs.token }}
      run: echo "user-id=$(gh api "/users/${{ env.APP_SLUG }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"

    - name: "Set Commiter"
      env:
        APP_SLUG: ${{ steps.github-app-token.outputs.app-slug }}
        USER_ID: ${{ steps.get-user-id.outputs.user-id }}
      run: |
        git config --global user.name '${{ env.APP_SLUG }}[bot]'
        git config --global user.email '${{ env.USER_ID }}+${{ env.APP_SLUG }}[bot]@users.noreply.github.com'

    - name: "Calculate the Next Version"
      id: next-version
      uses: mathieudutour/github-tag-action@a22cf08638b34d5badda920f9daf6e72c477b07b # v6.2
      with:
        github_token: ${{ steps.github-app-token.outputs.token }}
        dry_run: true

    - name: "Bump version in Cargo.toml"
      env:
        NEW_VERSION: ${{ steps.next-version.outputs.new_version }}
      run: |
        # Update Cargo.toml
        sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml
        
        # Update Cargo.lock
        awk -v new_version="$NEW_VERSION" '
          $0 == "[[package]]" { in_package = 1; print; next }
          in_package && /^name = "af"/ { found_af = 1; print; next }
          in_package && found_af && /^version = / {
            print "version = \"" new_version "\""
            in_package = 0; found_af = 0
            next
          }
          { print }
        ' Cargo.lock > Cargo.lock.tmp && mv Cargo.lock.tmp Cargo.lock

    - name: "Commit and tag new version"
      env:
        NEW_TAG: ${{ steps.next-version.outputs.new_tag }}
        GH_TOKEN: ${{ steps.github-app-token.outputs.token }}
      run: |
        # Prepare --field flags for each changed file
        files=()
        for f in $(git status --porcelain | awk '{print $2}'); do
          files+=(--field "files[][path]=$f")
          files+=(--field "files[][contents]=$(base64 -w0 "$f")")
        done

        # Commit changes
        new_sha="$(
          gh api graphql \
            --jq '.data.createCommitOnBranch.commit.oid' \
            --field 'query=@.github/api/queries/createCommit.graphql' \
            --field "githubRepository=$GITHUB_REPOSITORY" \
            --field "branchName=$GITHUB_REF_NAME" \
            --field "expectedHeadOid=$(git rev-parse HEAD)" \
            --field "commitMessage=$NEW_TAG" \
            "${files[@]}"
        )"
        
        # Create a new tag
        gh api graphql \
          --field 'query=@.github/api/queries/createRef.graphql' \
          --field "repoId=$(gh repo view "$GITHUB_REPOSITORY" --json id --jq .id)" \
          --field "name=refs/tags/$NEW_TAG" \
          --field "sha=$new_sha"
